# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Test.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# -------------------------------------------------------------------------
# This code has been developped by: William Bonilla
# For any questions you can contact my at miloubonilla@gmail.com
# -------------------------------------------------------------------------
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import *
from Phidget22.Devices.Encoder import *
from Phidget22.Devices.Log import *
from Phidget22.LogLevel import *
from Phidget22.Phidget import *
from Phidget22.PhidgetException import *
import traceback
import sys
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import configparser as ConfigParser  # Python 3
from lib_global_python import searchLoggerFile as logger
from lib_global_python import MQTT_client
from Git_Repo.api_phidget_n_MQTT.src.lib import phidget22Handler as handler

def NewFile(file,config,fileText):
    config.set('filenameLogger','filename',fileText)
    with open(file,'w') as configfile:
        config.write(configfile)
def NewPath(file,config,pathText):
    config.set('filenameLogger','filename',pathText)
    with open(file,'w') as configfile:
        config.write(configfile)
def ConnectToEnco(config, encoder0):
    # connect to mqtt broker
    client = MQTT_client.createClient("Encoder", config)

    ############
    # connection to Phidget encoder and wait for measures
    # publish the datas on config/MQTT/topic
    try:
        Log.enable(LogLevel.PHIDGET_LOG_INFO, "phidgetlog.log")
        # Create your Phidget channels
        # Set addressing parameters to specify
        encoder0.client = client
        encoder0.clientTopic = config.get('MQTT', 'topic')
        encoder0.printLog = config.getboolean('encoder', 'printLog')
        encoder0.chooseDataInterval = config.getint('encoder', 'dataInterval')

        # Assign any event handlers you need before calling open so that no events are missed.
        encoder0.setOnPositionChangeHandler(handler.onPositionChange)
        encoder0.setOnAttachHandler(handler.onAttach)
        encoder0.setOnDetachHandler(handler.onDetach)

        # Open your Phidgets and wait for attachment
        encoder0.openWaitForAttachment(5000)
    except PhidgetException as ex:
        #We will catch Phidget Exceptions here, and print the error informaiton.
        traceback.print_exc()
        print("")
        print("PhidgetException " + str(ex.code) + " (" + ex.description + "): " + ex.details)
def DisconnectEnco(encoder0):
    encoder0.close()
def PlotData(config):
    ############
    # Encoder's resolution in mm per pulse
    #     Encoder_mm_per_Pulse = 0.02
    Encoder_mm_per_Pulse = config.getfloat('encoder', 'resolution')
    print("encoder resolution : " + str(Encoder_mm_per_Pulse))

    ############
    # search for the last logger file based on the indentation
    #     filename="Logger_encoder_07.txt"
    filename = logger.searchLoggerFile(config)
    data = np.genfromtxt(filename, delimiter=",", names=True)

    # convert the number of pulse position change into mm
    PositionChange_mm = data['PositionChange'] * Encoder_mm_per_Pulse

    # recorded time when datas are received in s
    time = data['TimeRecording']
    time -= time[0]  # the beginning time at 0

    # vel is the velocity measured by the encoder
    # as the positionChange_mm is in mm and the TimeChange is in ms
    # the velocity is given in m/s
    # If a 'detach' from the encoder, TimeChange=0 and vel will be Inf
    vel = np.divide(PositionChange_mm, data['TimeChange'])

    ############
    # initialize the plot
    fig, ax1 = plt.subplots()

    # plot the encoder velocity in time
    color = 'tab:blue'
    lns1 = ax1.plot(time, vel, label="Velocity", color=color)
    ax1.set_xlabel("time[s]")
    ax1.set_ylabel("Velocity[m/s]", color=color)

    color = 'tab:blue'
    ax1.tick_params(axis='y', labelcolor=color)
    ax1.grid()

    #     # Create a Rectangle patch
    #     rect = patches.Rectangle((0,0),20,0.2,linewidth=1,edgecolor='k',facecolor='tab:grey')
    #     # Add the patch to the Axes
    #     ax1.add_patch(rect)

    # Draw a grey rectangle patch for each detach of the encoder aka 'missing values' aka TimeChange=0
    for k in np.argwhere(data['TimeChange'] == 0):
        if k == 0:
            rect = patches.Rectangle((time[k], 0), time[k + 1] - time[k], 2, linewidth=1, edgecolor='k',
                                     facecolor='tab:grey')
            ax1.add_patch(rect)
            lns3 = rect
        elif k != len(data['TimeChange']):
            if k == np.argwhere(data['TimeChange'] == 0)[0]:
                rect = patches.Rectangle((time[k - 1], 0), time[k + 1] - time[k - 1], 2, linewidth=1, edgecolor='k',
                                         facecolor='tab:grey')
                lns3 = ax1.add_patch(rect)
            else:
                rect = patches.Rectangle((time[k - 1], 0), time[k + 1] - time[k - 1], 2, linewidth=1, edgecolor='k',
                                         facecolor='tab:grey')
                ax1.add_patch(rect)

    # plot the encoder distance measured in m
    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

    color = 'tab:red'
    ax2.set_ylabel('Position[m]', color=color)  # we already handled the x-label with ax1
    lns2 = ax2.plot(time, np.cumsum(PositionChange_mm / 1000), color=color, label="Position")
    ax2.tick_params(axis='y', labelcolor=color)

    plt.title("velocity and position measured by encoder \n in file : " + filename)

    # Legend manage if there is no missing value meaning lns3 does not exist
    try:
        lns = [lns1[0], lns2[0], lns3]
        labs = ('Velocity', 'Position', 'Missing velocity')
    except:
        lns = [lns1[0], lns2[0]]
        labs = ('Velocity', 'Position')
    ax1.legend(lns, labs)  # , loc=0)

    fig.tight_layout()  # otherwise the right y-label is slightly clipped
    plt.show()
class Ui_Tester(QWidget):
    def setupUi(self, Tester):
        Tester.setObjectName("Tester")
        Tester.resize(673, 461)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../Downloads/Cirris.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Tester.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(Tester)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(9, 0, 181, 161))
        self.groupBox.setObjectName("groupBox")
        self.RunFileTwo = QtWidgets.QPushButton(self.groupBox)
        self.RunFileTwo.setGeometry(QtCore.QRect(20, 100, 131, 51))
        self.RunFileTwo.setObjectName("RunFileTwo")
        self.RunFileOne = QtWidgets.QPushButton(self.groupBox)
        self.RunFileOne.setGeometry(QtCore.QRect(20, 40, 131, 51))
        self.RunFileOne.setObjectName("RunFileOne")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(200, 0, 191, 80))
        self.groupBox_2.setObjectName("groupBox_2")
        self.EncoOnOffB = QtWidgets.QSlider(self.groupBox_2)
        self.EncoOnOffB.setGeometry(QtCore.QRect(10, 30, 160, 16))
        self.EncoOnOffB.setOrientation(QtCore.Qt.Horizontal)
        self.EncoOnOffB.setObjectName("EncoOnOffB")
        self.RegisterEnco = QtWidgets.QCheckBox(self.groupBox_2)
        self.RegisterEnco.setGeometry(QtCore.QRect(10, 50, 141, 23))
        self.RegisterEnco.setObjectName("RegisterEnco")
        self.CloseButton = QtWidgets.QPushButton(self.centralwidget)
        self.CloseButton.setGeometry(QtCore.QRect(580, 390, 89, 25))
        self.CloseButton.setObjectName("CloseButton")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 170, 181, 171))
        self.groupBox_3.setObjectName("groupBox_3")
        self.DisplayPlotButton = QtWidgets.QPushButton(self.groupBox_3)
        self.DisplayPlotButton.setGeometry(QtCore.QRect(10, 140, 161, 25))
        self.DisplayPlotButton.setObjectName("DisplayPlotButton")
        self.lcdNumber = QtWidgets.QLCDNumber(self.groupBox_3)
        self.lcdNumber.setGeometry(QtCore.QRect(10, 30, 141, 51))
        self.lcdNumber.setObjectName("lcdNumber")
        self.label_3 = QtWidgets.QLabel(self.groupBox_3)
        self.label_3.setGeometry(QtCore.QRect(10, 80, 161, 17))
        self.label_3.setObjectName("label_3")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(400, 0, 271, 341))
        self.groupBox_4.setObjectName("groupBox_4")
        self.textEditFile = QtWidgets.QTextEdit(self.groupBox_4)
        self.textEditFile.setGeometry(QtCore.QRect(10, 50, 251, 70))
        self.textEditFile.setObjectName("textEditFile")
        self.FIleLabel = QtWidgets.QLabel(self.groupBox_4)
        self.FIleLabel.setGeometry(QtCore.QRect(10, 30, 67, 17))
        self.FIleLabel.setObjectName("FIleLabel")
        self.FileConfirmButton = QtWidgets.QPushButton(self.groupBox_4)
        self.FileConfirmButton.setGeometry(QtCore.QRect(10, 130, 251, 25))
        self.FileConfirmButton.setObjectName("FileConfirmButton")
        self.textEditDirectory = QtWidgets.QTextEdit(self.groupBox_4)
        self.textEditDirectory.setGeometry(QtCore.QRect(10, 200, 251, 70))
        self.textEditDirectory.setObjectName("textEditDirectory")
        self.DirectoryConfirmB = QtWidgets.QPushButton(self.groupBox_4)
        self.DirectoryConfirmB.setGeometry(QtCore.QRect(10, 280, 251, 25))
        self.DirectoryConfirmB.setObjectName("DirectoryConfirmB")
        self.DirectorLabel = QtWidgets.QLabel(self.groupBox_4)
        self.DirectorLabel.setGeometry(QtCore.QRect(10, 180, 67, 17))
        self.DirectorLabel.setObjectName("DirectorLabel")
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(200, 100, 191, 111))
        self.groupBox_5.setObjectName("groupBox_5")
        self.ToConnectButton = QtWidgets.QPushButton(self.groupBox_5)
        self.ToConnectButton.setGeometry(QtCore.QRect(10, 30, 171, 31))
        self.ToConnectButton.setObjectName("ToConnectButton")
        self.ToDisconnectButton = QtWidgets.QPushButton(self.groupBox_5)
        self.ToDisconnectButton.setGeometry(QtCore.QRect(10, 70, 171, 31))
        self.ToDisconnectButton.setObjectName("ToDisconnectButton")
        self.groupBox_2.raise_()
        self.groupBox.raise_()
        self.CloseButton.raise_()
        self.groupBox_3.raise_()
        self.groupBox_4.raise_()
        self.groupBox_5.raise_()
        Tester.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Tester)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 673, 22))
        self.menubar.setObjectName("menubar")
        Tester.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Tester)
        self.statusbar.setObjectName("statusbar")
        Tester.setStatusBar(self.statusbar)
        self.retranslateUi(Tester)
        self.centerOnScreen()
        QtCore.QMetaObject.connectSlotsByName(Tester)

        ############
        encoder0 = Encoder()
        # import config file
        file='config.cfg'
        config = ConfigParser.ConfigParser()
        print("opening configuration file : config.cfg")
        config.read(file)
        # User interaction---------------------------------------------------------------------------------------------------------------------------------------
        self.CloseButton.clicked.connect(self.closeEvent)
        self.RegisterEnco.stateChanged.connect(self.registerIsOnMessage)
        self.DisplayPlotButton.clicked.connect(lambda: PlotData(config))
        self.ToConnectButton.clicked.connect(self.ConnectToEnco)
        self.FileConfirmButton.clicked.connect(lambda: NewFile(file,config,self.textEditFile.toPlainText()))
        self.DirectoryConfirmB.clicked.connect(lambda: NewPath(file,config,self.textEditDirectory.toPlainText()))
        self.ToConnectButton.clicked.connect(lambda: ConnectToEnco(config,encoder0))
        self.ToDisconnectButton.clicked.connect(lambda: DisconnectEnco(encoder0))
    def centerOnScreen(self):
        qtRectangle = self.frameGeometry()
        centerPoint = QDesktopWidget().availableGeometry().center()
        qtRectangle.moveCenter(centerPoint)
        self.move(qtRectangle.topLeft())

    # All coded actions
    # Functions--------------------------------------------------------------------------------------------------------------------------------------------
    def closeEvent(self, event):
        reply = QMessageBox.question(self, 'Quit?', 'Are you sure you want to quit?', QMessageBox.Yes | QMessageBox.No,QMessageBox.No)
        if reply == QMessageBox.Yes:
            if not type(event) == bool:
                event.accept()
            else:
                sys.exit()
        else:
            if not type(event) == bool:
                event.ignore()
    def registerIsOnMessage(self, int):
        if self.RegisterEnco.isChecked():
            recordIsOn = QMessageBox()
            recordIsOn.setIcon(QMessageBox.Information)
            recordIsOn.setText("Recording has started")
            recordIsOn.setWindowTitle("Information recording")
            recordIsOn.setStandardButtons(QMessageBox.Ok)
            recordIsOn.exec_()
        else:
            recordIsOff = QMessageBox()
            recordIsOff.setIcon(QMessageBox.Information)
            recordIsOff.setText("Recording is done")
            recordIsOff.setWindowTitle("Information recording")
            recordIsOff.setStandardButtons(QMessageBox.Ok)
            recordIsOff.exec_()

    def ConnectToEnco(self):
        print("Hello world")

    def retranslateUi(self, Tester):
        _translate = QtCore.QCoreApplication.translate
        Tester.setWindowTitle(_translate("Tester", "Interface de contrôle"))
        self.groupBox.setTitle(_translate("Tester", "Fichier"))
        self.RunFileTwo.setText(_translate("Tester", "Phidget"))
        self.RunFileOne.setText(_translate("Tester", "Gaspar"))
        self.groupBox_2.setTitle(_translate("Tester", "Encodeur"))
        self.RegisterEnco.setText(_translate("Tester", "Enregistrement"))
        self.CloseButton.setText(_translate("Tester", "Fermer"))
        self.groupBox_3.setTitle(_translate("Tester", "Afficher données"))
        self.DisplayPlotButton.setText(_translate("Tester", "Graphique de donnée"))
        self.label_3.setText(_translate("Tester", "Valeur en temps réel"))
        self.groupBox_4.setTitle(_translate("Tester", " Configuration"))
        self.FIleLabel.setText(_translate("Tester", "Fichier"))
        self.FileConfirmButton.setText(_translate("Tester", "Confirmer"))
        self.DirectoryConfirmB.setText(_translate("Tester", "Confirmer"))
        self.DirectorLabel.setText(_translate("Tester", "Dossier"))
        self.groupBox_5.setTitle(_translate("Tester", "Connectivité"))
        self.ToConnectButton.setText(_translate("Tester", "Lancer connexion"))
        self.ToDisconnectButton.setText(_translate("Tester", "Déconnexion"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Tester = QtWidgets.QMainWindow()
    ui = Ui_Tester()
    ui.setupUi(Tester)
    Tester.show()
    sys.exit(app.exec_())
